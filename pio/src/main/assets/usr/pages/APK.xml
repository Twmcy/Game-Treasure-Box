<?xml version="1.0" encoding="utf-8"?>
<group title="杀死进程">
<!-- START -->
    <action interruptible="false" auto-off="true">
        <title>查看/结束三方应用进程</title>
        <set>. ./Kill_APK-3.sh -k</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Kill_APK-3.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action id="killapk113" confirm="true" interruptible="false">
        <title>禁止卸载应用</title>
        <set>. ./uninstallapp.sh</set>
        <param name="package" type="app" multiple="true"/>
    </action>
    <action id="killapk113" confirm="true" interruptible="false">
        <title>解除卸载应用</title>
        <set>. ./uninstallapp2.sh</set>
        <param name="package" type="app" multiple="true"/>
    </action>
    <action id="killapk3" confirm="true" interruptible="false">
        <title>强制停止所有第三方软件</title>
        <set>. ./Kill_APK.sh</set>
    </action>
    
        <action shell="bg-task">
            <title>限制应用后台</title>
            <desc></desc>
            <set>. ./FuckAPP.sh</set>
       <param name="s" label="多少秒执行" type="text" desc="输入秒" />
        <param name="package" type="app" multiple="true"/>
        </action>
<!-- END -->
</group>

<group title="安装包提取">
<!-- START -->
    <action interruptible="false">
        <title>提取系统应用</title>
        <set>. ./APK_Extraction.sh</set>
            <param name="luj" title="提取到的目录" desc="上面是默认路径，请根据自己需求自定义" value-sh="if [[ -f $Data_Dir/APK_Extraction_Format.log ]]; then grep_prop luj $Data_Dir/APK_Extraction_Format.log; else echo $GJZS/APK_Extraction; fi" />
            <param name="Format" title="选择名称格式" desc="${V}版本名称 ${P}应用包名 ${C}版本号" value-sh="if [[ -f $Data_Dir/APK_Extraction_Format.log ]]; then grep_prop Format $Data_Dir/APK_Extraction_Format.log; else echo \${P}-\${V}; fi" />
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-s.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>提取第三方应用</title>
        <set>. ./APK_Extraction.sh</set>
            <param name="luj" title="提取到的目录" desc="上面是默认路径，请根据自己需求自定义" value-sh="if [[ -f $Data_Dir/APK_Extraction_Format.log ]]; then grep_prop luj $Data_Dir/APK_Extraction_Format.log; else echo $GJZS/APK_Extraction; fi" />
            <param name="Format" title="选择名称格式" desc="${V}版本名称 ${P}应用包名 ${C}版本号" value-sh="if [[ -f $Data_Dir/APK_Extraction_Format.log ]]; then grep_prop Format $Data_Dir/APK_Extraction_Format.log; else echo \${P}-\${V}; fi" />
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-3.sh" />
    </action>
<!-- END -->
</group>

<group title="安装应用">
<!-- START -->
    <action interruptible="false">
        <title>安装单个应用</title>
        <desc>支持降级安装APK</desc>
        <summary>支持apk/apks/xapk/apex文件</summary>
        <set>. ./install_apk.sh</set>
        <params>
            <param name="Delete_APK" label="自动删除安装包" type="switch" />
            <param name="File" type="file" editable="true" required="true" title="可输入文件绝对路径，也可以使用文件选择器选择文件"  />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="true">
        <title>批量安装应用</title>
        <desc>安装指定目录下的所有APK</desc>
        <summary>支持apk/apks/xapk/apex文件</summary>
        <set>. ./Batch_installation.sh</set>
        <params>
            <param name="Search_Dir" label="搜索子目录" type="checkbox" />
            <param name="Delete_APK" label="自动删除安装包" type="switch" />
            <param name="log" label="输出安装日志" type="switch" />
            <param name="File_Dir" title="可输入目录绝对路径，也可以通过文件选择器长按选定目录" type="folder" editable="true" required="true" value-sh="Dir=$Data_Dir/Batch_installation.log; if [[ -f $Dir ]]; then cat $Dir; else echo $lu; fi " />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true">
        <title>伪装应用安装来源安装</title>
        <summary>支持apk/apks/xapk/apex文件</summary>
        <set>. ./install_apk.sh -s</set>
        <params>
            <param name="installer" title="请输入你要伪装的来源包名" required="true" />
            <param name="File" type="file" editable="true" required="true" title="可输入文件绝对路径，也可以使用文件选择器选择文件" />
        </params>
    </action>
<!-- END -->
</group>

<group title="查看冻结/冻结/恢复应用">
<!-- START -->
    <action interruptible="false">
        <title>冻结系统应用</title>
        <set>for i in $package; do pm disable-user $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-s.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>冻结第三方应用</title>
        <set>for i in $package; do pm disable-user $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-3.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>查看并恢复已冻结的应用①</title>
        <desc>默认勾选全部</desc>
        <set>for i in $package; do pm enable $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-d.sh" value-sh=". ./Get_Package_Name-d.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>查看并恢复已冻结的应用②</title>
        <desc>默认不勾选</desc>
        <set>for i in $package; do pm enable $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-d.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true">
        <title>使用包名冻结、启用应用程序</title>
        <set>if [[ -n $Freeze ]]; then for i in $Freeze; do pm disable-user $i; done; fi; if [[ -n $Enable ]]; then for o in $Enable; do pm enable $o; done; fi; sleep 1</set>
        <params>
            <param name="Freeze" title="请输入你要冻结的应用包名，多个包名请用输入法的回车键换行即可" />
            <param name="Enable" title="请输入你要启用的应用包名，多个包名请用输入法的回车键换行即可" />
        </params>
    </action>
<!-- END -->
</group>

<group title="卸载/恢复应用">
<!-- START -->
    <action interruptible="false">
        <title>自选方式卸载第三方应用①</title>
        <desc>无法恢复，请自行承担风险</desc>
        <set>for i in $package; do pm uninstall --user 0 $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-3.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式卸载第三方应用②（保留数据）</title>
        <desc>无法恢复，请自行承担风险</desc>
        <set>for i in $package; do pm uninstall -k --user 0 $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-3.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式卸载系统应用①</title>
        <desc>无法恢复，请自行承担风险</desc>
        <set>for i in $package; do pm uninstall --user 0 $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-s.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式卸载系统应用②（保留数据）</title>
        <desc>无法恢复，请自行承担风险</desc>
        <set>for i in $package; do pm uninstall -k --user 0 $i; done</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-s.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true">
        <title>使用包名卸载任意应用程序</title>
        <desc>无法恢复，请自行承担风险</desc>
        <set>for i in $uninstall_apk; do if [[ $k = 1 ]]; then pm uninstall -k --user 0 $i; else pm uninstall --user 0 $i; fi; done</set>
        <params>
            <param name="k" label="保留用户数据卸载" type="checkbox" />
            <param name="uninstall_apk" title="请输入你要卸载的应用包名，无法恢复，请自行承担风险，多个包名请换行" required="true" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式恢复系统应用①</title>
        <desc>默认勾选全部</desc>
        <set>. ./Uninstalled_apk_Recover.sh</set>
            <param name="package" type="packages" multiple="true" options-sh=". ./Uninstalled_apk_Get.sh" value-sh="cat $Data_Dir/Uninstalled_apk.log" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式恢复系统应用②</title>
        <desc>默认不勾选</desc>
        <set>. ./Uninstalled_apk_Recover.sh</set>
            <param name="package" type="packages" multiple="true" options-sh=". ./Uninstalled_apk_Get.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action>
        <title>使用包名恢复系统应用</title>
        <set>for i in $apk; do pm install-existing --user 0 ${i}; done</set>
        <params>
            <param name="apk" title="请输入应用包名，多个包名请用输入法的回车键换行即可" required="true"></param>
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true">
        <title>卸载所有系统软件更新</title>
        <desc>删除所有系统应用的更新，并回退到系统自带的版本</desc>
        <set>pm uninstall-system-updates</set>
    </action>
<!-- END -->
</group>

<group title="隐藏/恢复应用">
<!-- START -->
    <action interruptible="false">
        <title>隐藏系统应用</title>
        <desc>隐藏后不显示图标</desc>
        <set>. ./Hide_app2.sh</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-s.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>隐藏第三方应用</title>
        <desc>隐藏后不显示图标</desc>
        <set>. ./Hide_app2.sh</set>
            <param name="package" type="app" multiple="true" options-sh=". ./Get_Package_Name-3.sh" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式恢复应用①</title>
        <desc>默认勾选全部</desc>
        <set>. ./Hidden_app_Records_Recover.sh</set>
            <param name="package" type="packages" multiple="true" options-sh="cat $Data_Dir/Hidden_app_Records.log" value-sh="cat $Data_Dir/Hidden_app_Records.log" />
    </action>
<!-- END -->
<!-- START -->
    <action interruptible="false">
        <title>自选方式恢复应用②</title>
        <desc>默认不勾选</desc>
        <set>. ./Hidden_app_Records_Recover.sh</set>
            <param name="package" type="packages" multiple="true" options-sh="cat $Data_Dir/Hidden_app_Records.log" />
    </action>
<!-- END -->
</group>

<group title="管理应用程序">
<!-- START -->
    <action auto-off="true">
        <title>使用包名强制结束应用程序</title>
        <set>echo "您输入了$kill1包名"; echo ; echo 结果如下; am force-stop $kill1</set>
        <params>
            <param name="kill1" title="请输入要强制结束的应用包名" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true">
        <title>使用包名删除数据</title>
        <desc>清除全部数据与缓存</desc>
        <set>echo "您输入了$clear1包名"; echo ; echo 结果如下; pm clear $clear1; sleep 2</set>
        <params>
            <param name="clear1" title="请输入要清理清除全部数据与缓存的应用包名" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true">
        <title>使用包名启动应用程序</title>
        <desc>目前只支持包名启动，输入应用名称也可以执行以后再说吧！</desc>
        <set>echo "您输入了$Enable_APK包名"; echo ; echo 结果如下; sleep 1.5; monkey -p $Enable_APK -c android.intent.category.LAUNCHER 1</set>
        <params>
            <param name="Enable_APK" title="请输入要启动的应用包名" />
        </params>
    </action>
<!-- END -->
</group>

<group title="查看应用信息">
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看应用可使用的最大内存</title>
        <set>getprop dalvik.vm.heapgrowthlimit</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看可用的应用包名</title>
        <desc>列出所有可用应用（不包括冻结与隐藏的），仅显示可用的应用，结果格式［package：包名］</desc>
        <set>pm list packages -e</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看所有包名</title>
        <desc>查看结果格式［package：包名］</desc>
        <set>pm list packages</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看第三方应用包名</title>
        <desc>查看结果格式［package：包名］</desc>
        <set>pm list packages -3</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看系统应用包名</title>
        <desc>结果格式［package：包名］</desc>
        <set>pm list packages -s</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看所有包名（包含路径）</title>
        <desc>结果格式［package：安装路径=包名］</desc>
        <set>pm list packages -f</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看第三方应用包名（包含路径）</title>
        <desc>结果格式［package：安装路径=包名］</desc>
        <set>pm list packages -3 -f</set>
    </action>
<!-- END -->
<!-- START -->
    <action confirm="true" interruptible="false">
        <title>查看系统应用包名（包含路径）</title>
        <desc>结果格式［package：安装路径=包名］</desc>
        <set>pm list packages -s -f</set>
    </action>
<!-- END -->
</group>

<group title="使用关键字符查看信息">
<!-- START -->
    <action>
        <title>使用过滤查看相关包名</title>
        <desc>输入关键字符串就可以过滤查看，结果格式为［package：安装路径］</desc>
        <set>echo "您输入了$SSS（关键字符串）"; echo ; echo 结果如下; pm list packages $SSS</set>
        <params>
            <param name="SSS" title="请输入包名关键字符来查看，例如输入：［qq］查找手机上所有qq相关的包名" readonly="false" />
        </params>
    </action>
<!-- END -->
</group>

<group title="自定义查看应用程序（APK）相关信息">
<!-- START -->
    <action>
        <title>使用包名查看安装路径</title>
        <desc>只支持输入包名查看，结果格式为［package：安装路径］</desc>
        <set>echo "您输入了$View_APK包名"; echo ; echo 结果如下; pm path "$View_APK"</set>
        <params>
            <param name="View_APK" title="请输入包名来查看安装路径" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action>
        <title>使用包名查看安装路径（含包名）</title>
        <desc>只支持输入包名查看，结果格式为［package：安装路径=已输入的包名］</desc>
        <set>echo "您输入了$View_APK2包名"; echo ; echo 结果如下; pm list packages -f "$View_APK2"</set>
        <params>
            <param name="View_APK2" title="请输入包名来查看安装路径" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action>
        <title>使用包名查看包名安装应用信息</title>
        <desc>只支持输入包名查看</desc>
        <set>echo "您输入了$View_APK3包名"; echo ; echo 结果如下; dumpsys package "$View_APK3"</set>
        <params>
            <param name="View_APK3" title="请输入包名来查看包名安装应用信息" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action>
        <title>使用包名查看全部详细信息</title>
        <desc>只支持输入包名查看</desc>
        <set>echo "您输入了$View_APK4包名"; echo ; echo 结果如下; pm dump "$View_APK4"</set>
        <params>
            <param name="View_APK4" title="请输入包名来查看安装包所有详细信息" />
        </params>
    </action>
<!-- END -->
<!-- START -->
    <action>
        <title>使用包名查看电量消耗情况</title>
        <desc>只支持输入包名查看</desc>
        <set>echo "您输入了$View_APK5包名"; echo ; echo 结果如下; dumpsys batterystats $View_APK5</set>
        <params>
            <param name="View_APK5" title="请输入包名来查看该应用的电量消耗情况" />
        </params>
    </action>
<!-- END -->
</group>

<group title="其他">
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.taobao.taobao&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>修复淘宝闪退</title>
        <desc>清理优酷和淘宝下载的热更新文件</desc>
        <set>. ./app_simple.sh</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.android.chrome&#34; &#38;&#38; $SDK -ge 29 ]] &#38;&#38; echo 1 || echo 0">
        <title>卸载旧版本 TrichromeLibrary</title>
        <desc>Play 商店在安装和升级 Chrome 和 Webview 时会自动安装相应的 TrichromeLibrary，但是旧版本不会自动卸载，这占用了大量的存储空间，这个来自 entr0pia 的脚本可帮助你卸载它们</desc>
        <set>. ./trichromelibrary-squoosh.sh</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tencent.mm&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>打开微信调试页面</title>
        <desc>可在该页面关闭一些广告</desc>
        <set>am start com.tencent.mm/com.tencent.mm.plugin.brandservice.ui.timeline.BizTestUI</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tencent.mm&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>打开微信维修厂</title>
        <desc>可以对微信进行一些更深入的调整</desc>
        <set>am start com.tencent.mm/com.tencent.mm.plugin.repairer.ui.RepairerMainUI</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tencent.qq&#34; &#38;&#38; -d &#34;$DATA_DIR/com.tencent.tim&#34; ]] &#38;&#38; echo 0 || echo 0">
        <title>使用QQ登录TIM</title>
        <desc>TIM这坨屎总是能给我们一些惊喜，例如各种原因无法登录；这个时候就只能先在QQ上登录好账号然后将数据复制到TIM，这样打开TIM就是已登录状态了</desc>
        <set>cp -f $DATA_DIR/com.tencent.qq/files $DATA_DIR/com.tencent.tim/files</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tencent.mm&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>打开微信HardCoder配置页面</title>
        <desc>可以对微信自带的调度系统进行配置</desc>
        <set>am start com.tencent.mm/com.tencent.mm.ui.tools.HardCoderSettingUI</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tmri.app.main&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>修复12123闪退</title>
        <desc>请先为12123启用Magisk Hide</desc>
        <set>pm disable com.tmri.app.main/x.t.i.a.n</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/cn.gov.pbc.dcep&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>修复数字人民币闪退</title>
        <desc>请先为数字人民币启用Magisk Hide</desc>
        <set>pm disable cn.gov.pbc.dcep/com.secneo.apkwrapper.r.S</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.shanghaionstar&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>修复安吉星闪退</title>
        <desc>请先为安吉星启用Magisk Hide</desc>
        <set>pm disable com.shanghaionstar/com.secneo.apkwrapper.r.S</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tencent.tmgp.sgame&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>修复王者荣耀闪退</title>
        <desc>正常的就不要使用了</desc>
        <set>chmod 000 $DATA_DIR/com.tencent.tmgp.sgame/files/tss_tmp</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.miHoYo.Yuanshen&#34; || &#34;$DATA_DIR/com.miHoYo.ys.bilibili&#34; || &#34;$DATA_DIR/com.miHoYo.ys.mi&#34; || &#34;$DATA_DIR/com.miHoYo.GenshinImpact&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>修复原神数据异常</title>
        <desc>同时修复各个渠道服，正常的就不要使用了</desc>
        <set>chmod 000 $DATA_DIR/com.miHoYo.Yuanshen/files/tss_tmp; chmod 000 $DATA_DIR/com.miHoYo.ys.bilibili/files/tss_tmp; chmod 000 $DATA_DIR/com.miHoYo.ys.mi/files/tss_tmp; chmod 000 $DATA_DIR/com.miHoYo.GenshinImpact/files/tss_tmp</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.tencent.mobileqq&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>去除QQ个性化风格</title>
        <set>. ./QQ_Personalized_style_set.sh</set>
        <pages>
            <param name="Bubble" title="去除QQ聊天气泡" options-sh="printf 'false|默认\ntrue|禁用'" />
            <param name="Drop_Expression" title="去除聊天界面掉表情" options-sh="printf 'false|默认\ntrue|禁用'" />
            <param name="Font" title="去除字体特效" options-sh="printf 'false|默认\ntrue|禁用'" />
            <param name="Expression" title="去除表情推介" options-sh="printf 'false|默认\ntrue|禁用'" />
            <param name="Head_Pendant" title="去除头像挂件" options-sh="printf 'false|默认\ntrue|禁用'" />
        </pages>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/top.trumeet.mipush&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>清空MIPush注册信息</title>
        <desc>清空第三方MIPush全部注册信息，注册异常时可使用，慎点</desc>
        <set>. ./mipush_clear.sh</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="false">
        <title>修复Google 服务异常耗电</title>
        <desc>修复Google 服务不断尝试系统更新而异常耗电，可能有副作用</desc>
        <set>pm disable com.google.android.gms/.chimera.GmsIntentOperationService</set>
    </action>
<!-- END -->
<!-- START -->
    <action auto-off="true" interruptible="false" visible="[[ -d &#34;$DATA_DIR/com.google.android.gsf&#34; ]] &#38;&#38; echo 1 || echo 0">
        <title>进入Google设置</title>
        <set>am start com.google.android.gms/.app.settings.GoogleSettingsLink &#38;&gt;/dev/null</set>
    </action>
<!-- END -->
<!-- START -->
    <switch auto-off="true" interruptible="false" id="Google_Service" visible=". ./support/Google_Service.sh">
        <title>Google服务</title>
        <desc>关闭此开关以临时禁用Google框架</desc>
        <get>. ./switchs/Google_Service_Get.sh</get>
        <set>. ./switchs/Google_Service_Set.sh</set>
    </switch>
<!-- END -->
</group>